# Global Safety
- Every coding session starts with: `git switch -c chore/wip-$(date +%Y-%m-%d)`.
- Every 30 min: make a WIP commit. If tests donâ€™t pass, prefix with `wip:`.
- End of day: run `scripts/snapshot.sh` to tag `snapshot-YYYY-MM-DD` and push `safety-net/YYYY-MM-DD`.

# Cursor AI Guardrails
- Any AI change >50 lines or multi-file: FIRST create branch `backup/before-ai-<shortdesc>`.
- Require: "Explain changes line-by-line" before accepting large edits.
- Ask for edge cases and failure modes before accepting algorithmic code.
- Never accept secrets or API keys in prompts/code; if detected, abort and scrub.

# Python Rules
- Python 3.11+, PEP8, type hints mandatory.
- Pre-commit must pass: black, isort, ruff, mypy, nbstripout.
- Use pinned deps: `requirements.txt` (exact versions) or `environment.yml` (conda).
- Use `logging.getLogger(__name__)`; avoid `print` in libraries.
- Determinism: set seeds (numpy, random, torch) and log in metadata.

# MATLAB/Simulink Rules
- Enable Code Analyzer; treat warnings as blockers.
- Track `.slx/.mdl/.mat` via Git LFS; export textual configs via `.m` scripts.
- Provide `matlab/run_all.m` that reproduces results end-to-end without clicks.
- Save outputs to `output/YYYY-MM-DD/<experiment>/` with `metadata.json` (parameters, commit SHA, MATLAB version).
- Include MATLAB Unit Test stubs for core functions; CI must run them.

# Project Hygiene
- No direct commits to `main`. Use feature branches + PRs. Merge via squash commits.
- Conventional commits required: feat/fix/docs/refactor/test/chore.
- Maintain `CHANGELOG.md`; bump versions via `python/src/project/version.py` or MATLAB `+pkg/Version.m`.

# PR Checklist (block merge unless all checked)
- [ ] Reproducible: `run_all` completes locally
- [ ] Tests pass (MATLAB + Python)
- [ ] Large binary outputs excluded or LFS tracked
- [ ] Env files updated
- [ ] AI changes explained in PR description
- [ ] No secrets or large data dumps

# Domain-Specific Notes
- Golf swing modeling: export kinematic parameter tables (CSV), torque profiles (CSV/MAT), figure data (CSV). Include sampling rates and coordinate-frame definitions in metadata.
- Chemical simulations: pin solver tolerances, units, and EOS; store input decks (JSON/YAML) and outputs (CSV/Parquet) with schema version.

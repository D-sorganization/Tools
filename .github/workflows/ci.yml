name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better diffs
          
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit pytest pytest-cov
          if [ -f python/requirements.txt ]; then pip install -r python/requirements.txt; fi
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Run quality check
        run: |
          if [ -f scripts/quality-check.py ]; then
            python scripts/quality-check.py
          else
            echo "⚠️ Warning: scripts/quality-check.py not found"
          fi
          
      - name: Check for placeholders
        run: |
          # Fail if TODO, FIXME, or other placeholders found in Python files
          if grep -r "TODO\|FIXME\|XXX\|HACK\|pass #\|\.\.\..*#\|NotImplementedError" \
            --include="*.py" \
            --exclude-dir=".git" \
            --exclude-dir="archive" \
            --exclude-dir="legacy" \
            --exclude-dir="experimental" .; then
            echo "❌ ERROR: Placeholders found in code"
            exit 1
          else
            echo "✅ No placeholders found"
          fi
            
      - name: Check for magic numbers
        run: |
          # Check for common magic numbers that should be constants
          if grep -r "[^0-9a-zA-Z_]3\.14[0-9]*\|9\.8[0-9]*\|6\.67[0-9]*\|2\.71[0-9]*" \
            --include="*.py" \
            --exclude-dir=".git" \
            --exclude-dir="tests" .; then
            echo "⚠️ WARNING: Possible magic numbers found (should be named constants with sources)"
            echo "Examples: 3.14→math.pi, 9.8→GRAVITY_M_S2, 2.71→math.e"
          else
            echo "✅ No obvious magic numbers found"
          fi
          
      - name: Check for approximations
        run: |
          # Fail if "approximately" or similar found
          if grep -ri "approximately\|approx[^a-z]\|roughly\|~[0-9]" \
            --include="*.py" --include="*.m" \
            --exclude-dir=".git" \
            --exclude-dir="docs" .; then
            echo "❌ ERROR: Approximations found - use exact values with sources"
            exit 1
          else
            echo "✅ No approximations found"
          fi
            
      - name: Run pre-commit
        run: |
          pre-commit run --all-files --show-diff-on-failure
          
      - name: Run strict type checking
        run: |
          pip install mypy
          if find . -name "*.py" -not -path "./archive/*" -not -path "./legacy/*" | head -n1 | grep -q .; then
            mypy . --strict --ignore-missing-imports || echo "⚠️ Type errors found"
          else
            echo "No Python files to type check"
          fi
          
      - name: Run tests with coverage
        run: |
          if [ -d python/tests ] || [ -d tests ]; then
            pytest -xvs --cov=python --cov-report=term-missing --cov-fail-under=60 || {
              echo "❌ Tests failed or coverage below 60%"
              exit 1
            }
          else
            echo "⚠️ WARNING: No tests directory found - ADD TESTS!"
          fi
          
      - name: Verify reproducibility
        run: |
          # Check that random seeds are set in Python files using randomness
          echo "Checking for unseeded randomness..."
          for file in $(find . -name "*.py" -type f -not -path "./archive/*" -not -path "./legacy/*"); do
            if grep -q "np\.random\|random\.\|torch\." "$file" 2>/dev/null; then
              if ! grep -q "seed\|random_state\|generator" "$file"; then
                echo "⚠️ Warning: $file uses randomness without visible seed"
              fi
            fi
          done
          
      - name: Check for required constants documentation
        run: |
          # Verify physical constants have units and sources
          echo "Checking constants documentation..."
          for file in $(find . -name "*.py" -type f -not -path "./tests/*" -not -path "./archive/*"); do
            if grep -q "GRAVITY\|MASS\|DENSITY\|COEFFICIENT" "$file" 2>/dev/null; then
              if ! grep -q "\[.*\].*#\|#.*\[.*\]" "$file"; then
                echo "⚠️ Warning: $file may have undocumented constants (need units + source)"
              fi
            fi
          done
          
      - name: Summary
        if: always()
        run: |
          echo "### CI Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Check | ${{ steps.*.outcome[4] || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| No Placeholders | ${{ steps.*.outcome[5] || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| No Magic Numbers | ${{ steps.*.outcome[6] || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| No Approximations | ${{ steps.*.outcome[7] || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Pre-commit | ${{ steps.*.outcome[8] || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Type Checking | ${{ steps.*.outcome[9] || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests + Coverage | ${{ steps.*.outcome[10] || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          
  matlab-analysis:
    runs-on: ubuntu-latest
    if: false  # Enable when MATLAB runner available
    steps:
      - uses: actions/checkout@v4
      - uses: matlab-actions/setup-matlab@v2
      - uses: matlab-actions/run-command@v2
        with:
          command: |
            % Add paths
            addpath(genpath('matlab'));
            
            % Check for magic numbers in MATLAB
            mFiles = dir('**/*.m');
            for i = 1:length(mFiles)
                content = fileread(fullfile(mFiles(i).folder, mFiles(i).name));
                if contains(content, {'3.14', '9.8', '6.67'})
                    warning('Possible magic number in %s', mFiles(i).name);
                end
            end
            
            % Run tests
            results = runtests('matlab/tests');
            assertSuccess(results);